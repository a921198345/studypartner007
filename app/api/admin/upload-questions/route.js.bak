import { NextResponse } from 'next/server';
import { writeFile } from 'fs/promises';
import { join } from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

// 将exec转换为Promise形式
const execAsync = promisify(exec);

export async function POST(request) {
  try {
    const formData = await request.formData();
    const file = formData.get('file');
    const subject = formData.get('subject');
    
    if (!file || !subject) {
      return NextResponse.json(
        { error: '请提供文件和学科' },
        { status: 400 }
      );
    }
    
    // 检查文件类型
    if (!file.name.endsWith('.docx') && !file.name.endsWith('.doc')) {
      return NextResponse.json(
        { error: '只支持.docx或.doc格式的文件' },
        { status: 400 }
      );
    }
    
    // 创建上传目录
    const uploadDir = join(process.cwd(), 'uploads');
    
    // 保存文件
    const fileName = `${subject}_${Date.now()}.docx`;
    const filePath = join(uploadDir, fileName);
    
    const fileBuffer = await file.arrayBuffer();
    await writeFile(filePath, Buffer.from(fileBuffer));
    
    // 执行增强版Python脚本解析文件
    // 使用虚拟环境中的Python
    const pythonPath = join(process.cwd(), 'venv_flask_api/bin/python');
    const scriptPath = join(process.cwd(), 'parse_questions.py');
    
    console.log('执行解析脚本:', `${pythonPath} ${scriptPath} "${filePath}" "${subject}" --output-json`);
    
    // 添加超时设置 - 增加到60秒
    const { stdout, stderr } = await execAsync(
      `${pythonPath} ${scriptPath} "${filePath}" "${subject}" --output-json`,
      { timeout: 60000 } // 60秒超时
    );
    
    if (stderr) {
      console.error('解析错误:', stderr);
      return NextResponse.json(
        { error: '文件解析失败', details: stderr },
        { status: 500 }
      );
    }
    
    // 尝试解析stdout为JSON，获取格式问题报告
    let formatIssues = [];
    let parseResult = {};
    
    try {
      parseResult = JSON.parse(stdout);
      if (parseResult.format_issues && Object.keys(parseResult.format_issues).length > 0) {
        formatIssues = parseResult.format_issues;
      }
    } catch (e) {
      console.error('解析脚本输出不是有效JSON:', e);
      // 如果无法解析JSON，使用原始输出
      parseResult = { message: stdout };
    }
    
    // 返回结果，包括格式问题
    return NextResponse.json({
      success: true,
      message: `文件上传并解析${formatIssues.length > 0 ? '部分' : ''}成功`,
      details: parseResult.message || stdout,
      format_issues: formatIssues,
      total_questions: parseResult.total_questions || 0,
      parsed_questions: parseResult.parsed_questions || 0
    });
    
  } catch (error) {
    console.error('处理上传文件时出错:', error);
    return NextResponse.json(
      { error: '服务器处理文件时出错' },
      { status: 500 }
    );
  }
}

// Route segment config for App Router
export const runtime = 'nodejs'; 